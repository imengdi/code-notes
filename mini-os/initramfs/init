#!/bin/busybox sh

MOUNT1="proc"
MOUNT2="sysfs"
MOUNT3="devtmpfs"

LX2160_DISK_DEV="/dev/nvme1n1p1"
J5_DISK_DEV="/dev/mmcblk0p35"

C1="arch ash base64 cat chattr chgrp chmod chown conspy cp cpio cttyhack date dd df dmesg dnsdomainname dumpkmap echo ed egrep false fatattr fdflush fgrep fsync getopt grep gunzip gzip hostname hush ionice iostat ipcalc kbd_mode kill link linux32 linux64 ln login ls lsattr lzop makemime mkdir mknod mktemp more mount mountpoint mpstat mt mv netstat nice nuke pidof ping ping6 pipe_progress printenv ps pwd reformime resume rev rm rmdir rpm run-parts scriptreplay sed setarch setpriv setserial sh sleep stat stty su sync tar touch true umount uname usleep vi watch zcat"
C2="[ [[ awk basename bc beep blkdiscard bunzip2 bzcat bzip2 cal chpst chrt chvt cksum clear cmp comm crontab cryptpw cut dc deallocvt diff dirname dos2unix dpkg dpkg-deb du dumpleases eject env envdir envuidgid expand expr factor fallocate fgconsole find flock fold free ftpget ftpput fuser groups hd head hexdump hexedit hostid id install ipcrm ipcs killall last less logger logname lpq lpr lsof lspci lsscsi lsusb lzcat lzma man md5sum mesg microcom mkfifo mkpasswd nc nl nmeter nohup nproc nsenter nslookup od openvt passwd paste patch pgrep pkill pmap printf pscan"
C3="pstree pwdx readlink realpath renice reset resize rpm2cpio runsv runsvdir rx script seq setfattr setkeycodes setsid setuidgid sha1sum sha256sum sha3sum sha512sum showkey shred shuf smemcap softlimit sort split ssl_client strings sum sv svc svok tac tail taskset tcpsvd tee telnet test tftp time timeout top tr traceroute traceroute6 truncate ts tty ttysize udhcpc6 udpsvd unexpand uniq unix2dos unlink unlzma unshare unxz unzip uptime users uudecode uuencode vlock volname w wall wc wget which who whoami whois xargs xxd xz xzcat yes"

# Linking system binaries from busybox
for cmd in $C1 $C2 $C3; do
  /bin/busybox ln -s /bin/busybox /bin/$cmd
done

# Linking reboot binary to bin folder
/bin/busybox ln -s /apps/reboot /bin/reboot

# Mount linux info to file system at userland
mkdir -p /proc && mount -t $MOUNT1 $MOUNT1 /proc
mkdir -p /sys  && mount -t $MOUNT2 $MOUNT2 /sys
mkdir -p /dev  && mount -t $MOUNT3 $MOUNT3 /dev

# Check block device aviliability for data write
if [ -b $LX2160_DISK_DEV ]; then
  DISK_IN_USE=$LX2160_DISK_DEV
elif [ -b $J5_DISK_DEV ]; then
  DISK_IN_USE=$J5_DISK_DEV
else
  DISK_IN_USE="None"
fi

# Show block device partition info
echo "Disk device for mount: $DISK_IN_USE"

# Mount partition and write data if not none
if [ "$DISK_IN_USE" != "None" ]; then
  USER_DATA_DEV=$DISK_IN_USE
  USER_DATA_DIR="/kdumpfile"

  mkdir -p $USER_DATA_DIR

  echo "Mounting partition $USER_DATA_DEV to dir $USER_DATA_DIR ..."
  mount $USER_DATA_DEV $USER_DATA_DIR

  echo "*** START_LOG ***" > $USER_DATA_DIR/dump_test.log
  date >> $USER_DATA_DIR/dump_test.log
  echo "*** END_LOG ***" >> $USER_DATA_DIR/dump_test.log
else
  echo "No partition for data write!"
  echo
fi

# Rock'n Roll!
export PS1='(linux)$ '
echo "Welcome to the minimal Linux ..."
sh
